def key_positions(seq, key):
    """
    Takes a sequence and a key function
    returns an array such that the ith element
    of the array is the starting position of objects
    in seq whose key is i
    """
    temp_list = []
    for char in seq:
        temp_list.append(key(char))
    k = max(temp_list)

    C = []
    for i in range(0, k+1):
        C.append(0)

    for a in seq:
        C[key(a)] = C[key(a)] + 1
    
    sum = 0
    for i in range(0, k+1):
        C[i], sum = sum, sum + C[i]
    return C

def sorted_array(seq, key, positions):
    """
    Takes a sequence, a key function,
    and an array of key positions generated by
    key_positions
    and produces an array containing the elements
    of seq according to the key function
    """
    B = []
    for i in range(0, len(seq)):
        B.append(0)
    for a in seq:
        B[positions[key(a)]] = a
        positions[key(a)] = positions[key(a)] + 1
    return B

def radix_sort(numbers, d):
    """
    Takes a sequence of natural numbers called numbers 
    and uses counting sort iteratively to sort the sequence 
    up to the d-th digit from the right. 
    The argument d is a positive (and thus non-zero) integer
    """
    num_list = numbers
    for n in range(-1, (-1*d)-1, -1):
        num_list = digit_tup(num_list, n)

        num_list.sort(key= lambda x: x[1])
        num_list = tup_list(num_list)
    
    return num_list

def digit_tup(numbers, n):
    num_list = []
    for number in numbers:
        digit = str(number)
        if len(digit) >= (-1*n):
            num_list.append((number, int(digit[n])))
        else:
            num_list.append((number, 0))
    return num_list

def tup_list(tup):
    lis = []
    for thing in tup:
        lis.append(thing[0])
    return lis

print(radix_sort([329, 457, 657, 839, 436, 720, 355], 3))
#[329, 355, 436, 457, 657, 720, 839]
print(radix_sort([329, 457, 657, 839, 436, 720, 355], 1))
#[720, 355, 436, 457, 657, 329, 839]
print(radix_sort([329, 457, 657, 839, 436, 720, 355], 2))
#[720, 329, 436, 839, 355, 457, 657]
print(radix_sort([9, 57, 657], 1))
#[57, 657, 9]
print(radix_sort([9, 57, 657], 2))
#[9, 57, 657]